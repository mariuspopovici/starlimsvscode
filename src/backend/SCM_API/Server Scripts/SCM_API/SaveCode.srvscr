/******************************************************************************
Description.. :	Script to save code of an Enterprise item
Author....... :	DC, MARIUS
Date......... : 2023-06-02
*******************************************************************************/;
:DECLARE oPayload, oResponse, oResult, sURI, String, oUtils, sRequestAsFile, oEnterpriseItem, sCode, sUserLang;
String := "";

oResult := CreateUDObject();
oResponse := CreateUDObject({
	{"success", .T.},
	{"data", NIL}
});

:TRY;
	sRequestAsFile := Request:SaveInputStream();
	oPayload := FromJSON(ReadText(sRequestAsFile));
	FileSupport(sRequestAsFile, "DELETE");
:CATCH;
	UsrMes("ERROR:", GetLastSSLError():FullDescription);
	Response:ContentType := "application/problem+json";
	Response:StatusCode := 500;
	oResponse:success := .F.;
	oResponse:data := "Could not deserialize request body.";
	:RETURN oResponse;
:ENDTRY;

/* check for uri;
:IF !Empty(oPayload) .AND. oPayload:IsProperty("URI");
    sURI := oPayload:URI;
	oUtils := CreateUDObject("SCM_API.Utils", {});
	oEnterpriseItem := oUtils:ParseURI(sURI);
:ELSE;
    Response:StatusCode := 400;
	oResponse:success := .F.;
	oResponse:data := String:Format("Missing required property '{0}'", "URI");
	:RETURN oResponse;
:ENDIF;

/* check for code;
sCode := "";
:IF !Empty(oPayload) .AND. oPayload:IsProperty("Code");
    sCode := oPayload:Code;
:ELSE;
    Response:StatusCode := 400;
	oResponse:success := .F.;
	oResponse:data := String:Format("Missing required property '{0}'", "Code");
	:RETURN oResponse;
:ENDIF;

/* get language;
:IF !Empty(oPayload) .AND. oPayload:IsProperty("UserLang") .AND. !Empty(oPayload:UserLang);
	sUserLang := oPayload:UserLang;
:ELSE;
	sUserLang := GetSetting("DEFAULTLANGUAGE");
:ENDIF;

:DECLARE sItemName, sItemID, sType, sAppName, sCategory;
sItemName := BuildArray(oEnterpriseItem:Name,, ".")[1];
sType := oEnterpriseItem:Type;

:IF oEnterpriseItem:IsProperty("CategoryName");
	sCategory := oEnterpriseItem:CategoryName;
:ENDIF;

:IF oEnterpriseItem:IsProperty("AppName");
	sAppName := oEnterpriseItem:AppName;
:ENDIF;

:TRY;
	:BEGINCASE;
		:CASE sType == "SS";
			sItemName := sCategory + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.ServerScriptProvider.SaveCode", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "CS";
			sItemName := sCategory + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.ClientScriptProvider.SaveCode", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "DS";
			sItemName := sCategory + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.DataSourceProvider.SaveCode", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "APPDS";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.AppDataSourceProvider.SaveCode", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "APPSS";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.AppServerScriptProvider.SaveCode", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "APPCS";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.AppClientScriptProvider.SaveCode", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "HTMLFORMXML" .OR. sType == "XFDFORMXML";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.FormProvider.SaveXFDDocument", {sItemID, sUserLang, sCode});
		:EXITCASE;
		:CASE sType == "HTMLFORMCODE" .OR. sType == "XFDFORMCODE";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.FormProvider.SaveCodeBehind", {sItemID, sCode});
		:EXITCASE;
		:CASE sType == "HTMLFORMGUIDE";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("SaveGuideScript", {sItemId, sCode, sUserLang});
		:EXITCASE;
		:CASE sType == "HTMLFORMRESOURCES" .OR. sType == "XFDFORMRESOURCES";
			sItemName := sAppName + "." + sItemName;
			sItemID := oUtils:GetItemGUID(sItemName, sType);
			DoProc("Enterprise_Data_Providers.FormProvider.SaveProgramaticXfdResources", {sItemID, sUserLang, sCode});
	:ENDCASE;  
:CATCH;
	:DECLARE Error;
	Error := GetLastSSLError();
	UsrMes("ERROR", Error:FullDescription);
	:IF Error:Code = 3574;
		oResponse:data := "Item is not checked out - please check it out first before saving it to the server!";
	:ELSE;
		oResponse:data := Error:FullDescription;
	:ENDIF;
	Response:StatusCode := 400;
	oResponse:success := .F.;
	:RETURN oResponse;
:ENDTRY;

Response:StatusCode := 200;
oResponse:success := .T.;
oResponse:data := "Done";
:RETURN oResponse;

:PROCEDURE SaveGuideScript;
:PARAMETERS sItemId, sCode, sUserLang;
:DEFAULT sUserLang, GetSetting("DEFAULTLANGUAGE");

	:DECLARE sResourcesXML, oResourcesDS, nIterator, sKey, bFound;
	sResourcesXML := MimeDecode(DoProc("Enterprise_Data_Providers.FormProvider.GetProgramaticXfdResources", {sItemID, sUserLang}));
	oResourcesDS := DoProc("Enterprise_Server.DataSetSupport.DsFromString", {sResourcesXML});
	bFound := .F.;
	
	:IF oResourcesDS:Tables:Count == 0;
		oResourcesDS := DoProc("CreateResourceDataSet", {});
	:ENDIF;
	
	:FOR nIterator := 0 :TO oResourcesDS:Tables[0]:Rows:Count - 1;
		sKey := LimsString(oResourcesDS:Tables[0]:Rows[nIterator]['ResourceId']);
		:IF sKey == "GUIDE";
			oResourcesDS:Tables[0]:Rows[nIterator]['ResourceValue'] := sCode;
			bFound := .T.;
		:ENDIF;
	:NEXT;
	:IF !bFound;
		:DECLARE oNewRow;
		oNewRow := oResourcesDS:Tables[0]:NewRow();
		oNewRow["ResourceId"] := "GUIDE";
		oNewRow["ResourceValue"] := sCode;
		oNewRow["Guid"] := CreateGuid();
		oNewRow := oResourcesDS:Tables[0]:Rows:Add(oNewRow);
	:ENDIF;
	
	sResourcesXML := DoProc("DStoString", {oResourcesDS});				
	DoProc("Enterprise_Data_Providers.FormProvider.SaveProgramaticXfdResources", {sItemID, sUserLang, sResourcesXML});
:ENDPROC;

:PROCEDURE CreateResourceDataSet;
	:DECLARE oDataSet, oDataTable, oPKColumn;
	oDataSet := LimsNetConnect("", "System.Data.DataSet", {"ResourcesDataset"});
	oDataTable := LimsNetConnect("", "System.Data.DataTable", {"ResourcesTable"});
	oDataTable:Columns:Add("Guid");
	oPKColumn := oDataTable:Columns:Add("ResourceId");
	oDataTable:Columns:Add("ResourceValue");
	oDataTable:PrimaryKey := LimsNetCast({oPKColumn}, "System.Data.DataColumn[]");
	oDataSet:Tables:Add(oDataTable);
	:RETURN oDataSet;
:ENDPROC;

:PROCEDURE DSToString;
:PARAMETERS oDataSet, bAddXmlHeader;
:DEFAULT bAddXmlHeader, .F.;
	:DECLARE oStringWriter, sXmlDataSet;

	oStringWriter := LimsNETConnect("", "System.IO.StringWriter");
	oDataSet:WriteXml(oStringWriter);
	sXmlDataSet := oStringWriter:ToString();
	oStringWriter:Close();

	:IF bAddXmlHeader .AND. !(sXmlDataSet = "<?xml");
		sXmlDataSet := '<?xml version="1.0" standalone="yes" ?>' + CrLf + sXmlDataSet;
	:ENDIF;
	
	:RETURN sXmlDataSet;	
:ENDPROC;